<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: emacs | SudoWork2.0]]></title>
  <link href="http://fakedrake.github.io/blog/categories/emacs/atom.xml" rel="self"/>
  <link href="http://fakedrake.github.io/"/>
  <updated>2013-09-28T21:17:50+03:00</updated>
  <id>http://fakedrake.github.io/</id>
  <author>
    <name><![CDATA[Chris Perivolaropoulos]]></name>
    <email><![CDATA[darksaga2006@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Executable permissions]]></title>
    <link href="http://fakedrake.github.io/blog/2013/09/26/executable-permissions/"/>
    <updated>2013-09-26T16:07:00+03:00</updated>
    <id>http://fakedrake.github.io/blog/2013/09/26/executable-permissions</id>
    <content type="html"><![CDATA[<p>There are some emacs commands that I call interactively only to use a
small subset of their functionality which means more keystrokes and
zoning out for a bit (interuption = check reddit). Prominent examples
of this are rename-file and chmod. Not anymore though! WIth this
command you give executable permissions to everyone on the current
file!</p>

<p>``` scm Make current file executable
(defun chmod+x-this ()
  &ldquo;Add executable permissions to the current file.&rdquo;
  (interactive)
  (if buffer-file-name</p>

<pre><code>  (let ((new-mode (logior #o111 (file-modes buffer-file-name))))
(set-file-modes buffer-file-name new-mode))
(message "No such file to make executable.")))
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs: a faithful companion when configuring your system]]></title>
    <link href="http://fakedrake.github.io/blog/2013/06/19/emacs-a-faithful-companion-when-configuring-your-system/"/>
    <updated>2013-06-19T20:31:00+03:00</updated>
    <id>http://fakedrake.github.io/blog/2013/06/19/emacs-a-faithful-companion-when-configuring-your-system</id>
    <content type="html"><![CDATA[<p>Emacs is awesome as we all know and one of the reasons it is awesome
is tramp. This little extension-plugin-package-whatever is bundled
with emacs and lets you access files remotely as if they were in your
filesystem. It can also open files with sudo from the same
non-priviledged emacs instance. How it works is you prepend ‘/sudo::’
to the filename and you are good to go! And this is all really cool.</p>

<p>Being the greedy bastard that I am however, this was not enough for
me. I don’t want to have to find the file again and prepend sudo, this
will also open a new buffer so I will have to deal with having two
buffers of the same file and this can be quite annoying after a while.</p>

<p>Thankfully emacs is awesome as we have established and it was
extremely easy with a couple of lines of elisp to have it login as
root before writing to disk if I try to save without permissions. Here
is my code:</p>

<p>``` scm Give sudo to current file editing session
(defadvice save-buffer (around save-buffer-as-root-around activate)
  &ldquo;Use sudo to save the current buffer.&rdquo;
  (interactive &ldquo;p&rdquo;)
  (if (and (buffer-file-name)</p>

<pre><code>   (file-accessible-directory-p (current-directory))
   (not (file-writable-p (buffer-file-name))))
  (let ((buffer-file-name (format "/sudo::%s" buffer-file-name)))
ad-do-it)
ad-do-it))
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
