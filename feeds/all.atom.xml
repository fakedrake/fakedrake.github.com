<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Batman Ph.D</title><link href="http://fakedrake.github.io/" rel="alternate"></link><link href="http://fakedrake.github.io/feeds/all.atom.xml" rel="self"></link><id>http://fakedrake.github.io/</id><updated>2014-03-31T22:30:00+03:00</updated><entry><title>Dealing with enormous ramdisks and Qemu</title><link href="http://fakedrake.github.io/dealing-with-enormous-ramdisks-and-qemu.html" rel="alternate"></link><updated>2014-03-31T22:30:00+03:00</updated><author><name>Chris Perivolaropoulos</name></author><id>tag:fakedrake.github.io,2014-03-31:dealing-with-enormous-ramdisks-and-qemu.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;WARNING:&lt;/strong&gt; This is hacky and BAD. Do not use 500M ramdisks for
anything crucial. Make them small and mount the rest of the filesystem
using the rootfs related boot commands and the &lt;code&gt;-hda&lt;/code&gt; option on qemu
or use nfs or whatever.&lt;/p&gt;
&lt;p&gt;So there are times in Think-Silicon land when permanent storage
devices may not always be there for you. May that be because your
ethernet device screws up and you are relying on NFS for rootfs, or
may it be because I just want the kernel to do my bidding and load a
ramdisk that is as big as half a Gigabyte. The point is, shoving such
a big ramdisk down the kernel's throat will result in it choking into
something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="nl"&gt;RAMDISK:&lt;/span&gt; &lt;span class="n"&gt;ext2&lt;/span&gt; &lt;span class="n"&gt;filesystem&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nl"&gt;RAMDISK:&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="n"&gt;too&lt;/span&gt; &lt;span class="n"&gt;big&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500496&lt;/span&gt;&lt;span class="n"&gt;KiB&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;16384&lt;/span&gt;&lt;span class="n"&gt;KiB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;xemacps&lt;/span&gt; &lt;span class="n"&gt;e000b000&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eth&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Set&lt;/span&gt; &lt;span class="n"&gt;clk&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;124999998&lt;/span&gt; &lt;span class="n"&gt;Hz&lt;/span&gt;
&lt;span class="n"&gt;xemacps&lt;/span&gt; &lt;span class="n"&gt;e000b000&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eth&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;FULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;List&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;partitions&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="mf"&gt;1f&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;            &lt;span class="mi"&gt;1024&lt;/span&gt; &lt;span class="n"&gt;mtdblock0&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;1f&lt;/span&gt;&lt;span class="mo"&gt;01&lt;/span&gt;            &lt;span class="mi"&gt;5120&lt;/span&gt; &lt;span class="n"&gt;mtdblock1&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;1f&lt;/span&gt;&lt;span class="mo"&gt;02&lt;/span&gt;             &lt;span class="mi"&gt;128&lt;/span&gt; &lt;span class="n"&gt;mtdblock2&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;1f&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;            &lt;span class="mi"&gt;6016&lt;/span&gt; &lt;span class="n"&gt;mtdblock3&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;1f&lt;/span&gt;&lt;span class="mo"&gt;04&lt;/span&gt;            &lt;span class="mi"&gt;4096&lt;/span&gt; &lt;span class="n"&gt;mtdblock4&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;No&lt;/span&gt; &lt;span class="n"&gt;filesystem&lt;/span&gt; &lt;span class="n"&gt;could&lt;/span&gt; &lt;span class="n"&gt;mount&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tried&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;ext3&lt;/span&gt; &lt;span class="n"&gt;ext2&lt;/span&gt; &lt;span class="n"&gt;ext4&lt;/span&gt; &lt;span class="n"&gt;vfat&lt;/span&gt; &lt;span class="n"&gt;msdos&lt;/span&gt;
&lt;span class="n"&gt;Kernel&lt;/span&gt; &lt;span class="n"&gt;panic&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;syncing&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;VFS&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Unable&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;mount&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="n"&gt;fs&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;unknown&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Turns out you can do something about it, may it be hacky and
horrible. This is the tale of a glorious journey through the mysts of
the linux kernel to a busybox prompt inside of Qemu.&lt;/p&gt;
&lt;p&gt;Let's start at the beginning. When the kernel registers a block device
it then registers a number of disks, with the same major number as the
block device, that take upon them the actual work of the driver. This
paradigm is implemented in &lt;em&gt;block/genhd.c&lt;/em&gt;. This description is also
neither complete nor 100% accurate but it is good enough for now.&lt;/p&gt;
&lt;p&gt;When the kernel boots up, one of the first drivers it loads is one
called &lt;em&gt;brd&lt;/em&gt; as in &lt;em&gt;block ramdisk device&lt;/em&gt;. That driver creates a block
device interface to the main memory and lives in
&lt;em&gt;drivers/block/brd.c&lt;/em&gt;. The block device is created under the name
&lt;em&gt;ramdisk&lt;/em&gt; and major number 1 and gets disks called &lt;em&gt;ram#&lt;/em&gt; as in
&lt;em&gt;ram0&lt;/em&gt;, &lt;em&gt;ram1&lt;/em&gt;, ..., (16 by default). Those disks each represent a
space in virtual memory and have the same size, which by default is
16M. The original problem we faced above is basically the kernel
trying to fit a 500M initrd in one of those 16M disks. What we need to
do basically is resize them so that the ramdisk fits nicely.&lt;/p&gt;
&lt;p&gt;As either google or the code in &lt;em&gt;brd.c&lt;/em&gt; will kindly tell you you can
always tell the kernel in the boot commands &lt;em&gt;ramdisk_size=500000&lt;/em&gt;,
which will supposedly set things up so that we can just tell qemu
&lt;code&gt;-initrd &amp;lt;fucking-huge-ramdisk.img&amp;gt;&lt;/code&gt; and the next thing we know we are
happily writing commands on busybox. Right?&lt;/p&gt;
&lt;p&gt;&lt;img alt="WRONG" src="http://www.themistermen.co.uk/images/MrWrong.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;The kernel tries to create 16 such 500M disks. Which sucks. They are
virtual memory so it will actually boot but it is not something you
want on your virtual machine. We need to change the number of disks
the driver creates. You can do that via the &lt;code&gt;CONFIG_BLK_DEV_RAM_COUNT&lt;/code&gt;
option but I hate having to compile the entire kernel to change
something that can to some extent be changed from user space. Did I
mention you can create more such disks with &lt;code&gt;rdev -r&lt;/code&gt; from the shell?
That is because I have no idea if it is
true. &lt;em&gt;Documentation/blockdev/ramdisk.txt&lt;/em&gt; told me and it betrayed me
once by mentioning that I can &lt;code&gt;ramdisk_blocksize=N&lt;/code&gt; which if you grep
the source is hard to believe, and trust is lost easier than earned.&lt;/p&gt;
&lt;p&gt;Anyway what I ended up doing is editing &lt;code&gt;ramdisk_size()&lt;/code&gt; from this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* Legacy boot options - nonmodular */&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;__init&lt;/span&gt; &lt;span class="nf"&gt;ramdisk_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;rd_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;simple_strtol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to look more like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* Legacy boot options - nonmodular */&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;__init&lt;/span&gt; &lt;span class="nf"&gt;ramdisk_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;:
            &lt;span class="n"&gt;rd_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;:
            &lt;span class="n"&gt;rd_nr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you can pass &lt;em&gt;ramdisk_size=500000,1&lt;/em&gt; to tell the driver to make
just one 500M disk, while having &lt;em&gt;ramdisk_size=500000&lt;/em&gt; behave as
before. Noice!&lt;/p&gt;
&lt;p&gt;So now we simply run qemu&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;qemu&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="n"&gt;xilinx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;zynq&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a9&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;serial&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;serial&lt;/span&gt;
    &lt;span class="nl"&gt;mon:&lt;/span&gt;&lt;span class="n"&gt;stdio&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dtb&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;devtree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dtb&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;kernel&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zImage&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;initrd&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;enormous&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ramdisk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;nographic&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;console=ttyPS0,115200 root=/dev/ram rw ip=:::::eth0:dhcp \&lt;/span&gt;
&lt;span class="s"&gt;        loglevel=7 ramdisk_size=500496,1p&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And everything boots correctly!!&lt;/p&gt;
&lt;p&gt;I always run qemu from within a script so for completeness here is the
relevan excerpt&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;...

&lt;span class="nv"&gt;BOOTCMD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;console=ttyPS0,115200 root=/dev/ram rw ip=:::::eth0:dhcp loglevel=7 ramdisk_size=$(du --apparent-size $RAMDISK | awk &amp;#39;{print $1}&amp;#39;),1&amp;#39;&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;CMD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$QEMU -M xilinx-zynq-a9  -m 1024  -serial null -serial mon:stdio -dtb $DTB -kernel $KERNEL -initrd $RAMDISK -nographic&amp;quot;&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;Running: $CMD -append $BOOTCMD\nC-a x to kill...&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$CMD&lt;/span&gt; -append &lt;span class="s2"&gt;&amp;quot;$BOOTCMD&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As an extra benefit this will actually measure the ramdisk and make
the disk size only as big as it needs to be.&lt;/p&gt;</summary><category term="kernel"></category><category term="qemu"></category></entry><entry><title>When printks are too many</title><link href="http://fakedrake.github.io/when-printks-are-too-many.html" rel="alternate"></link><updated>2014-03-28T20:45:00+02:00</updated><author><name>Chris Perivolaropoulos</name></author><id>tag:fakedrake.github.io,2014-03-28:when-printks-are-too-many.html</id><summary type="html">&lt;p&gt;Being too lazy to use proper debugging methods as I am (although what
proper debugging methods are is sometimes
&lt;a href="http://www.linuxtoday.com/infrastructure/2000090700221OSCYKN"&gt;debateable&lt;/a&gt;),
I always (over)use printks to debug the kernel. Now the problem with
printks is that when you find your bug they are all over the kernel
code and it can be a real pain to remove them one by one.&lt;/p&gt;
&lt;p&gt;This is not a trivial problem when you spend more than a couple of
hours on a particular problem. The good news is that due to the nature
of printk-debugging you usually know which one of your nasty hacks
fixed the problem you were looking for. Thus you can &lt;code&gt;git diff&lt;/code&gt; those
to just keep the useful changes (I use emacs' ediff, meld or anything
interactive should be good enough), then you commit just those.&lt;/p&gt;
&lt;p&gt;You should learn from my mistakes and not blindly &lt;code&gt;git checkout&lt;/code&gt; at
the project root. For me there are usually some nasty device tree
changes that I make to fit Qemu and also my .config is setup for
debugging. I definitely dont want reverting any of that. Actually all
I want to revert is the .c files I threw printks in.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;sed&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;modified&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;xargs&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Works 99% of the time. To avoid the tragedy of the other 1% make sure
you take a look at &lt;code&gt;git status&lt;/code&gt; &lt;em&gt;beforehand&lt;/em&gt;.&lt;/p&gt;</summary><category term="git"></category><category term="kernel"></category><category term="debugging"></category></entry><entry><title>Hello World</title><link href="http://fakedrake.github.io/hello-world.html" rel="alternate"></link><updated>2010-10-03T10:20:00+03:00</updated><author><name>Chris Perivolaropoulos</name></author><id>tag:fakedrake.github.io,2010-10-03:hello-world.html</id><summary type="html">&lt;p&gt;This is some pyhon code&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="hello"></category><category term="world"></category></entry><entry><title>LaTeX plus Beamer</title><link href="http://fakedrake.github.io/latex-plus-beamer.html" rel="alternate"></link><updated>2010-10-03T10:20:00+03:00</updated><author><name>Chris Perivolaropoulos</name></author><id>tag:fakedrake.github.io,2010-10-03:latex-plus-beamer.html</id><summary type="html">&lt;h1&gt;Prelude&lt;/h1&gt;
&lt;p&gt;I am making a presentation about plone and I decided Impress is good
but not enough and that i should go with a non-wysiwyg solution:
LaTeX + Beamer. This is the first time I had to use Beamer with Latex
and it was quite a pleasant experience.  So before I get started with
some bumps I stumbled upon a quick recap of how to use beamer.&lt;/p&gt;
&lt;p&gt;Start the document with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;\documentclass&lt;/span&gt;&lt;span class="na"&gt;[arial, pdftex]&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;beamer&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are a couple of options available and you are welcome to look
them up(I wont go into them here) but these worked for my case(and I
believe fits most cases)&lt;/p&gt;
&lt;p&gt;Also you want to include &lt;code&gt;\usepackage{graphicx}&lt;/code&gt; if you need graphics in
your presentation(most cases).  Then add some info about the
presentation&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;\title&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;Foo Title&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\subtitle&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;Bar Subtitle&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\author&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;Chris Perivolaropoulos&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\institution&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;university of Patras&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Beamer uses this in some cases making your life easier(mostly in the title page).&lt;/p&gt;
&lt;p&gt;A quick summary of the slide definition mechanics of beamer: a slide
can be defined in two ways&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;\frame&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;Sole Contents of the slide&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;if you want something really quick (or in my case mostly for the draft version) and&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;frame&lt;span class="nb"&gt;}{&lt;/span&gt;optionally the slide title&lt;span class="nb"&gt;}&lt;/span&gt;
Contents
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;frame&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So next thing you decide when(and if) you want to show a slide with
the contents highlighted according to the context.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;\AtBeginSection&lt;/span&gt;&lt;span class="na"&gt;[]&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;frame&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="k"&gt;\frametitle&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;Table of Contents&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="k"&gt;\tableofcontents&lt;/span&gt;&lt;span class="na"&gt;[currentsection]&lt;/span&gt;&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;frame&lt;span class="nb"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This would be the case if you want a slide with a table of contents at
the beginning of each section (i would recommend heavy use of sections
and subsections, although i am too lazy to do that more than a
minimum)&lt;/p&gt;
&lt;p&gt;It is time to begin the document&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;document&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first slide is made by beamer based on the information you have
already provided.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;\frame&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\titlepage&lt;/span&gt;&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Flow control for pros&lt;/h1&gt;
&lt;p&gt;Within the slides you can use&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;\pause&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Whenever you want to stop the slide and wait for a pgdn(eg if show
items in a list one by one, put a &lt;code&gt;\pause&lt;/code&gt; after each item).&lt;/p&gt;
&lt;p&gt;Another way I found useful to control the flow is to use.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;\only&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;The only thing shown in the slide&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Each frame remains active for a number of slides (or rather is
made of a number of pdf pages if you have ever used office). The
contents of the argument of &lt;code&gt;\only&lt;/code&gt; will be shown only in the
slides/pages defined by . For example&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;frame&lt;span class="nb"&gt;}{&lt;/span&gt;In the beginning there was HTML&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;center&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\includegraphics&lt;/span&gt;&lt;span class="na"&gt;[width=0.5\textwidth]&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;html.pdf&lt;span class="nb"&gt;}&lt;/span&gt; &lt;span class="k"&gt;\\&lt;/span&gt;&lt;span class="c"&gt;% vector graphics&lt;/span&gt;
&lt;span class="k"&gt;\vspace&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;1cm&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\only&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\vspace&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;16pt&lt;span class="nb"&gt;}}&lt;/span&gt;
&lt;span class="k"&gt;\only&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;http://foo.com/about.html&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\only&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;http://foo.com/folder/item.html&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;center&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;frame&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A couple other useful things are shown here:&lt;/p&gt;
&lt;p&gt;one if you want somewhere to have an empty line and then have
something appear there &lt;code&gt;\only{\\}&lt;/code&gt; will not work. I know it would be
handy but LaTeX gets confused this way. What you do is put the size
of the fonts +2 for the space between the lines.&lt;/p&gt;
&lt;p&gt;Also it is good to use the center environment which&amp;#x2026;centers
everything in the slide. Be aware that this also means that if we
had omitted the &lt;code&gt;\only{\vspace{16pt}}&lt;/code&gt; line would screw up the
"effect" of the text appearing under the image because the size of
the content in step 2 is bigger than that of step one, so the
centering would "mess" things up. Another way to have the same
effect is to use a &lt;code&gt;\pause&lt;/code&gt; instead of &lt;code&gt;\only{\vspace{16pt}}&lt;/code&gt;. I
dont have a preference.&lt;/p&gt;
&lt;h1&gt;Vector graphics&lt;/h1&gt;
&lt;p&gt;Notice now the &lt;code&gt;\includegraphics&lt;/code&gt; line in the above exaple. I love
vector graphics and I love inkscape. Inkscape can produce pdf
files(save as-&amp;gt;*.pdf) readable by LaTeX in the way you see
above. Keep in mid though that you should convert any text in your
drawing to paths by or it will not be in the pdf(even though
inkscape's dialog claims to be able to do that for you) and also to
be careful if you are saving it as a page or as a drawing. If you
save as a page only the page is rendered when you include the file in
LaTeX, as a drawing is the way to go in most cases.&lt;/p&gt;
&lt;h1&gt;For the boring (or how to show statistics properly)&lt;/h1&gt;
&lt;p&gt;In my talk i also have some bar charts. What most documentation and
forums suggested for that was a package called pgfplots. DONT USE
THAT. It stole more than 4 hours of my life to produce a mediocre
result. Use R instead. In case you are not familiar with it R is a
language focused on dealing with statistics (package is &lt;code&gt;r-base&lt;/code&gt; for
ubuntu and &lt;code&gt;r&lt;/code&gt; for arch).&lt;/p&gt;
&lt;p&gt;It can produce REALLY easily bar charts that look the way you expect
them to IF you &lt;strong&gt;don't&lt;/strong&gt; use sweave. Sweave is a tool that is supposed
to provide a friendly bridge between R and LaTeX. It works the way
you expect it to but (as many latex modules) is poorly documented
and most importantly the workflow of working with it is very
inefficient. (Note that it has the advantage that it can be
automated meaning that if you plan to frequently work with plots and
graphs in LaTeX you should definitely look into it, if not stay away
as I would rather have done from the getgo).&lt;/p&gt;
&lt;p&gt;Instead i ended up being very happy and productive using the R shell
and making it export what I wanted in .pdf graphics files. I will not
go into detail of how to use R. It is really well documented and I am
not by far qualified to say anything about R except that it saved me
loads of time.&lt;/p&gt;
&lt;h1&gt;You're good to go&lt;/h1&gt;
&lt;p&gt;This is the wisdom I have acquired so far from writing my
presentation. I hope this saves people some time and energy.&lt;/p&gt;</summary><category term="latex"></category><category term="beamer"></category></entry></feed>