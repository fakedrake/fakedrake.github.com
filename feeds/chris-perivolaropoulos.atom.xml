<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Batman Ph.D</title><link href="http://fakedrake.github.io/" rel="alternate"></link><link href="http://fakedrake.github.io/feeds/chris-perivolaropoulos.atom.xml" rel="self"></link><id>http://fakedrake.github.io/</id><updated>2014-05-11T21:37:00+03:00</updated><entry><title>Remote testing with git and ssh</title><link href="http://fakedrake.github.io/remote-testing-with-git-and-ssh.html" rel="alternate"></link><updated>2014-05-11T21:37:00+03:00</updated><author><name>Chris Perivolaropoulos</name></author><id>tag:fakedrake.github.io,2014-05-11:remote-testing-with-git-and-ssh.html</id><summary type="html">&lt;p&gt;Running tests is an important part of the development workflow. You
want to do it often and you want it to be quick. Yet at times tests
are not quick. Tests can be slow and they can be fat. This means that
you probably prefer to run them on a powerful server rather than your
slow, low on memory laptop that you like using by on the beach and
mostly away from power outlets. "You know what would be awesome?" I
thought to myself one day while sipping pina collada on the roof
garden of Think Silicon HQ, "if instead of running my tests locally
and wait for ages for them to finish, I could push my changes to a
remote server with git, run these tests with ssh and get the results
with just one command!". A friend pointed out that what I want is a
CI, and one might be able to make that work but what I actually want
is not scheduled testing. Rather I need the shortest, and least
painful for my laptop, path between a minor change on the codebase and
a usable format of the test results. Preferably in an emacs
&lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Compilation-Mode.html"&gt;*compilation* buffer&lt;/a&gt;
(which is just output of the test command with the paths parsed as
hyperlinks).&lt;/p&gt;
&lt;p&gt;So I made a branch I call &lt;code&gt;bench&lt;/code&gt; because I was running some
benchamrks at the time, commited my failing code and pushed it to
github. Then I pulled the branch from our awesome server and ran the
tests. They finished in a fourth of time and my workstation was fully
functional during that time. "That was easy" I thought to myself. Then
I got the results parsed in emacs' compilation mode and tried to jump
to the first error. That failed. Miserably. The stack traces and
errors contained paths for the source files on the server.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Damn you brain" src="http://i.imgur.com/hTaOc3T.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;One way to circumvent that would be to convert all paths to relative
but I would prefer absolute paths to work as well so I decided i would
pipe the output through sed and translate the paths to somthing
compilation-mode would be able to deal with. I came up with
&lt;em&gt;remote_test.sh&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nv"&gt;REMOTE_ROOT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/path/to/remote-test&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;LOCAL_ROOT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/path/to/test&amp;quot;&lt;/span&gt;

&lt;span class="nv"&gt;REMOTE_SRV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;localhost &lt;span class="c"&gt;# for testing&lt;/span&gt;
&lt;span class="nv"&gt;REMOTE_USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;whoami&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="nv"&gt;SED_REMOTE_ROOT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$REMOTE_ROOT&lt;/span&gt; | sed &lt;span class="s1"&gt;&amp;#39;s/[\/&amp;amp;]/\\&amp;amp;/g&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;SED_LOCAL_ROOT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$LOCAL_ROOT&lt;/span&gt; | sed &lt;span class="s1"&gt;&amp;#39;s/[\/&amp;amp;]/\\&amp;amp;/g&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;function &lt;/span&gt;local_paths &lt;span class="o"&gt;{&lt;/span&gt;
    sed &lt;span class="s2"&gt;&amp;quot;s/$SED_REMOTE_ROOT/$SED_LOCAL_ROOT/g&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;function &lt;/span&gt;remote_paths &lt;span class="o"&gt;{&lt;/span&gt;
    sed &lt;span class="s2"&gt;&amp;quot;s/$SED_LOCAL_ROOT/$SED_REMOTE_ROOT/g&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;ARGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$@&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;REMOTE_CMD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$ARGS&lt;/span&gt; | remote_paths &lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;REMOTE_PWD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt; | remote_paths &lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;echo &lt;/span&gt;Running: &lt;span class="nv"&gt;$REMOTE_CMD&lt;/span&gt;

ssh &lt;span class="nv"&gt;$REMOTE_USER&lt;/span&gt;@&lt;span class="nv"&gt;$REMOTE_SRV&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;cd $REMOTE_PWD &amp;amp;&amp;amp; $REMOTE_CMD&amp;quot;&lt;/span&gt; |&amp;amp; local_paths
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice the escaping of the paths so that characters in the paths dong
get confused for parts of the sed command. So let's test it.&lt;/p&gt;
&lt;p&gt;Run the tests again like this now:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;(workstation)$&lt;/span&gt; ./remote_test.sh &lt;span class="s1"&gt;&amp;#39;echo Path is: /path/to/test &amp;gt;&amp;amp;2&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;Running: echo Path is: /path/to/remote-test&lt;/span&gt;
&lt;span class="go"&gt;fakedrake@localhost&amp;#39;s password:&lt;/span&gt;
&lt;span class="go"&gt;Path is: /path/to/test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice how the path on the command run by the remote server makes
sense to the server and the standard error when returned to us makes
sense to the local workstation. Thus if you, like me, have some
interesting way to generate paths in your test commands (ie some emacs
lisp to create run tests on a project local python virtual env) they
will be translated to paths that make sense on the server.&lt;/p&gt;
&lt;p&gt;That is cool but unless you use NFS (or afs or whatever network
filesystem) for home directories like we do in Think Silicon you also
need to let the server know what changes you made in the code. Git is
exactly what we need for that. My approach to solving this is to have
a temporary branch (ie &lt;code&gt;bench&lt;/code&gt;) that I will commit to whenever I want
to run a test. Then that branch will be pushed to the server and the
tests will run with the most recent code.&lt;/p&gt;
&lt;p&gt;It is, however, not very straightforward to just push changes to a
remote working tree. Pulling from the server is also not a good option
as I would hate to get into port forwarding on my local network if I
am working from home. So here is a hacky workaround for this. Make a
bare repository local to the server where I can push commits from
&lt;code&gt;bench&lt;/code&gt;. Once those are pushed, and before running the tests on
remote, the server will pull those changes, which should be pretty
fast since the repo is in the same filesystem. This has the added
benefit of not putting every little failing commit of &lt;code&gt;bench&lt;/code&gt; on
github (and having Travis check it for errors and who knows what
else).&lt;/p&gt;
&lt;p&gt;So to make a bare repository in &lt;em&gt;~/.testing&lt;/em&gt; on the server&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;(remote)$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; ~
&lt;span class="gp"&gt;(remote)$&lt;/span&gt; mkdir .testing
&lt;span class="gp"&gt;(remote)$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; .testing
&lt;span class="gp"&gt;(remote)$&lt;/span&gt; git clone --bare &amp;lt;some mirror of the project&amp;gt;
&lt;span class="gp"&gt;(remote)$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; /path/to/remote/project
&lt;span class="gp"&gt;(remote)$&lt;/span&gt; git remote add testing &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.testing/project.git
&lt;span class="gp"&gt;(remote)$&lt;/span&gt; git checkout bench
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On the local workstation add that as remote:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;(workstation)$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; /path/to/local/project
&lt;span class="gp"&gt;(workstation)$&lt;/span&gt; git remote add testing /home/remote-user/.testing/project.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then have &lt;em&gt;test_remote.sh&lt;/em&gt; push there before doing anything else by
throwing in there something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;BRANCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;git branch | awk &lt;span class="s1"&gt;&amp;#39;/\*/{print $2}&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;GIT_REMOTE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;server&amp;gt;

&lt;span class="k"&gt;function &lt;/span&gt;git_draft_sync &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;COMMIT_MSG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;[$(date +%s)] Draft commit&amp;quot;&lt;/span&gt;

    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Will now commit a dumb commit to current branch.&amp;quot;&lt;/span&gt;

    &lt;span class="nb"&gt;echo &lt;/span&gt;Commiting: &lt;span class="nv"&gt;$COMMIT_MSG&lt;/span&gt;
    git commit -a -m &lt;span class="s2"&gt;&amp;quot;$COMMIT_MSG&amp;quot;&lt;/span&gt;

    &lt;span class="nb"&gt;echo &lt;/span&gt;Pushing branch: &lt;span class="nv"&gt;$BRANCH&lt;/span&gt;
    git push &lt;span class="nv"&gt;$GIT_REMOTE&lt;/span&gt; &lt;span class="nv"&gt;$BRANCH&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And have the server pill the updates on the branch before testing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;REMOTE_CMD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;(git pull testing $BRANCH &amp;amp;&amp;amp; $(echo $ARGS | remote_paths))&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(and dont forget to run &lt;code&gt;git_draft_sync&lt;/code&gt; before ssh)&lt;/p&gt;
&lt;p&gt;And you are all set! My real world script for running python tests on
a remote server at CSAIL looks much like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="c"&gt;# Paths (don&amp;#39;t use / at the end)&lt;/span&gt;
&lt;span class="nv"&gt;REMOTE_ROOT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/path/to/remote/home/Projects&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;LOCAL_ROOT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/home/fakedrake/Projects/CSAIL/Python&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;REMOTE_SRV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;remote-server&amp;gt;
&lt;span class="nv"&gt;REMOTE_USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;username&amp;gt;


&lt;span class="nv"&gt;BRANCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;git branch | awk &lt;span class="s1"&gt;&amp;#39;/\*/{print $2}&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;GIT_REMOTE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;local&lt;/span&gt;

&lt;span class="k"&gt;function &lt;/span&gt;git_draft_sync &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;COMMIT_MSG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;[$(date +%s)] Draft commit&amp;quot;&lt;/span&gt;

    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Will now commit a dumb commit to current branch.&amp;quot;&lt;/span&gt;

    &lt;span class="nb"&gt;echo &lt;/span&gt;Commiting: &lt;span class="nv"&gt;$COMMIT_MSG&lt;/span&gt;
    git commit -a -m &lt;span class="s2"&gt;&amp;quot;$COMMIT_MSG&amp;quot;&lt;/span&gt;

    &lt;span class="nb"&gt;echo &lt;/span&gt;Pushing branch: &lt;span class="nv"&gt;$BRANCH&lt;/span&gt;
    git push &lt;span class="nv"&gt;$GIT_REMOTE&lt;/span&gt; &lt;span class="nv"&gt;$BRANCH&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;## -- No need to edit from here on --&lt;/span&gt;
&lt;span class="nv"&gt;SED_REMOTE_ROOT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$REMOTE_ROOT&lt;/span&gt; | sed &lt;span class="s1"&gt;&amp;#39;s/[\/&amp;amp;]/\\&amp;amp;/g&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;SED_LOCAL_ROOT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$LOCAL_ROOT&lt;/span&gt; | sed &lt;span class="s1"&gt;&amp;#39;s/[\/&amp;amp;]/\\&amp;amp;/g&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;function &lt;/span&gt;local_paths &lt;span class="o"&gt;{&lt;/span&gt;
    sed &lt;span class="s2"&gt;&amp;quot;s/$SED_REMOTE_ROOT/$SED_LOCAL_ROOT/g&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;function &lt;/span&gt;remote_paths &lt;span class="o"&gt;{&lt;/span&gt;
    sed &lt;span class="s2"&gt;&amp;quot;s/$SED_LOCAL_ROOT/$SED_REMOTE_ROOT/g&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;ARGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$@&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;REMOTE_CMD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;(git pull testing $BRANCH &amp;amp;&amp;amp; $(echo $ARGS | remote_paths ))&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;REMOTE_PWD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt; | remote_paths &lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Running perliminaries:&amp;quot;&lt;/span&gt;

&lt;span class="nb"&gt;echo &lt;/span&gt;ARGS: &lt;span class="nv"&gt;$ARGS&lt;/span&gt;
&lt;span class="nb"&gt;echo &lt;/span&gt;Running: &lt;span class="nv"&gt;$REMOTE_CMD&lt;/span&gt;
&lt;span class="nb"&gt;echo &lt;/span&gt;Directory: &lt;span class="nv"&gt;$REMOTE_PWD&lt;/span&gt;
&lt;span class="nb"&gt;echo &lt;/span&gt;At: &lt;span class="nv"&gt;$REMOTE_USER&lt;/span&gt;@&lt;span class="nv"&gt;$REMOTE_SRV&lt;/span&gt;

git_draft_sync
ssh &lt;span class="nv"&gt;$REMOTE_USER&lt;/span&gt;@&lt;span class="nv"&gt;$REMOTE_SRV&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;cd $REMOTE_PWD &amp;amp;&amp;amp; $REMOTE_CMD&amp;quot;&lt;/span&gt; |&amp;amp; local_paths
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Put this in the root directory of your project and change the paths at
the top of the script to something that makes sense for you. Then tell
your editor to prepend &lt;code&gt;./remote_test.sh&lt;/code&gt; before the test
command. Thus my emacs setup for example would do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;-*-&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;compilation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;~/Projects/CSAIL/Python/WikipediaBase/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;-*-&lt;/span&gt;
&lt;span class="n"&gt;Comint&lt;/span&gt; &lt;span class="n"&gt;started&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;Sun&lt;/span&gt; &lt;span class="n"&gt;May&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;remote_test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fakedrake&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Projects&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;CSAIL&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="c1"&gt;//bin/python  setup.py test&lt;/span&gt;
&lt;span class="n"&gt;Running&lt;/span&gt; &lt;span class="n"&gt;perliminaries&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="nl"&gt;ARGS:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fakedrake&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Projects&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;CSAIL&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="c1"&gt;//bin/python setup.py test&lt;/span&gt;
&lt;span class="nl"&gt;Running:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;pull&lt;/span&gt; &lt;span class="n"&gt;testing&lt;/span&gt; &lt;span class="n"&gt;bench&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Projects&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="c1"&gt;//bin/python setup.py test)&lt;/span&gt;
&lt;span class="nl"&gt;Directory:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Projects&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;WikipediaBase&lt;/span&gt;
&lt;span class="nl"&gt;At:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;Will&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;dumb&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nl"&gt;Commiting:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1399839442&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Draft&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt;
&lt;span class="n"&gt;On&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="n"&gt;bench&lt;/span&gt;
&lt;span class="n"&gt;Untracked&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;TAGS&lt;/span&gt;
    &lt;span class="p"&gt;[...]&lt;/span&gt;

&lt;span class="n"&gt;nothing&lt;/span&gt; &lt;span class="n"&gt;added&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;untracked&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="n"&gt;present&lt;/span&gt;
&lt;span class="n"&gt;Pushing&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;bench&lt;/span&gt;
&lt;span class="nl"&gt;Password:&lt;/span&gt;
&lt;span class="n"&gt;Everything&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;
&lt;span class="nl"&gt;Password:&lt;/span&gt;
&lt;span class="n"&gt;From&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;WikipediaBase&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt;            &lt;span class="n"&gt;bench&lt;/span&gt;      &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;FETCH_HEAD&lt;/span&gt;
&lt;span class="n"&gt;Already&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;running&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;span class="n"&gt;running&lt;/span&gt; &lt;span class="n"&gt;egg_info&lt;/span&gt;

&lt;span class="p"&gt;[...]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And compilation-mode sees the paths that it expects so I can jump
around the source based on the errors. If you haven't done already you
may also want to setup password-less login to your server. Not only is
it easier but it is much safer.&lt;/p&gt;</summary><category term="testin"></category><category term="git"></category><category term="ssh"></category><category term="remote"></category></entry><entry><title>Moving git branches across repositories</title><link href="http://fakedrake.github.io/moving-git-branches-across-repositories.html" rel="alternate"></link><updated>2014-05-07T15:49:00+03:00</updated><author><name>Chris Perivolaropoulos</name></author><id>tag:fakedrake.github.io,2014-05-07:moving-git-branches-across-repositories.html</id><summary type="html">&lt;p&gt;In a perfect world there is a one-to-one relationship between projects
and git trees. As you are happily working on your local repo, and
decide you want to get some commits from a different source you just
&lt;code&gt;git remote add&lt;/code&gt; that source and you have full access to it's
commits. Well sometimes things do not go as smoothly and you may find
yourself wanting to move your branch to a remote repo that may have a
largely common codebase but few to no common commits. Well turns out
git can handle that pretty easily. Here is how in one line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;git log --reverse --cherry master...&amp;lt;your-branch&amp;gt; --pretty=email --patch-with-stat | (cd /path/to/new/repo &amp;amp;&amp;amp; git checkout -b &amp;lt;your-branch&amp;gt; &amp;amp;&amp;amp; git am)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is quite simple really: we use &lt;code&gt;git log&lt;/code&gt; to get a comprehensive
description of each commit in &lt;code&gt;&amp;lt;your-branch&amp;gt;&lt;/code&gt;. Then create a new
branch at the new repo with the same name and pipe the descriptions of
the commits to &lt;code&gt;git am&lt;/code&gt; to create them in the new place.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; the commits in the new repo will not have the same SHA as in
 the old one so we are not really &lt;em&gt;moving&lt;/em&gt; the commits from one repo
 to another as much as &lt;em&gt;recreating&lt;/em&gt; them.&lt;/p&gt;</summary><category term="git"></category><category term="branch"></category><category term="shell"></category></entry><entry><title>Gdb signals</title><link href="http://fakedrake.github.io/gdb-signals.html" rel="alternate"></link><updated>2014-05-06T16:36:00+03:00</updated><author><name>Chris Perivolaropoulos</name></author><id>tag:fakedrake.github.io,2014-05-06:gdb-signals.html</id><summary type="html">&lt;p&gt;So unless you are debugging your own program and you know what you are
doing this is probably not what you expect to happen while a program
runs under GDB.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Program&lt;/span&gt; &lt;span class="n"&gt;received&lt;/span&gt; &lt;span class="n"&gt;signal&lt;/span&gt; &lt;span class="n"&gt;SIGUSR1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;defined&lt;/span&gt; &lt;span class="n"&gt;signal&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Switching&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0x7fffcff2c700&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LWP&lt;/span&gt; &lt;span class="mi"&gt;3296&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You may hit &lt;code&gt;c&lt;/code&gt; to continue but this will come up again sooner or
later and I like my breakpoints to be tidy.&lt;/p&gt;
&lt;p&gt;First take a look at how gdb handles each signal.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;
(gdb) info signals
Signal        Stop  Print   Pass to program Description

SIGHUP        Yes   Yes     Yes     Hangup
SIGINT        Yes   Yes     No      Interrupt
SIGQUIT       Yes   Yes     Yes     Quit
SIGILL        Yes   Yes     Yes     Illegal instruction
SIGTRAP       Yes   Yes     No      Trace/breakpoint trap
SIGABRT       Yes   Yes     Yes     Aborted
SIGEMT        Yes   Yes     Yes     Emulation trap

[...]

SIGWINCH      No    No      Yes     Window size changed
SIGLOST       Yes   Yes     Yes     Resource lost
&lt;b&gt;SIGUSR1      Yes Yes     Yes     User defined signal 1&lt;/b&gt;
SIGUSR2       Yes   Yes     Yes     User defined signal 2
SIGPWR        Yes   Yes     Yes     Power fail/restart

[...]

EXC_EMULATION Yes   Yes     Yes     Emulation instruction
EXC_SOFTWARE  Yes   Yes     Yes     Software generated exception
EXC_BREAKPOINT Yes  Yes     Yes     Breakpoint

Use the "handle" command to change these tables.
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As the command says you want &lt;code&gt;SIGUSR1&lt;/code&gt; to not stop and also for it to
be passed to the program. The other thing we notice here is that
&lt;code&gt;SIGTRAP&lt;/code&gt; is not passed to the program.&lt;/p&gt;
&lt;p&gt;To have &lt;code&gt;SIGUSR1&lt;/code&gt; be ignored by GDB&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;handle&lt;/span&gt; &lt;span class="n"&gt;SIGUSR1&lt;/span&gt; &lt;span class="n"&gt;nostop&lt;/span&gt; &lt;span class="n"&gt;noprint&lt;/span&gt;
&lt;span class="n"&gt;Signal&lt;/span&gt;        &lt;span class="n"&gt;Stop&lt;/span&gt;  &lt;span class="n"&gt;Print&lt;/span&gt;   &lt;span class="n"&gt;Pass&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt; &lt;span class="n"&gt;Description&lt;/span&gt;
&lt;span class="n"&gt;SIGUSR1&lt;/span&gt;       &lt;span class="n"&gt;No&lt;/span&gt;    &lt;span class="n"&gt;No&lt;/span&gt;  &lt;span class="n"&gt;Yes&lt;/span&gt;     &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;defined&lt;/span&gt; &lt;span class="n"&gt;signal&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now here is another recurring interrupt related issue: Sometimes you
need to to pass control to gdb while the program is running. The
default way would be to hit &lt;code&gt;C-c&lt;/code&gt;. In a very rare occasion (ie. qemu)
the process will catch the key and will not stop. Instead of
despairing you can try sending it a &lt;code&gt;SIGTRAP&lt;/code&gt;. That will stop the
program as if gdb had encountered a breakpoint. From another terminal
run.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pkill -TRAP &amp;lt;process-name&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you are using &lt;em&gt;emacs&lt;/em&gt; and &lt;em&gt;gud&lt;/em&gt; like me you can automate this with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;defun&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;gud&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;trap&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;optional&lt;/span&gt; &lt;span class="n"&gt;wrapping&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;interactive&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;*P&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;xargs pgrep -P | head -1 |&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;async&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;echo %d | %s %s xargs echo kill -TRAP&amp;quot;&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;*gud*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
         &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;wrapping&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Putting this in your &lt;em&gt;.emacs&lt;/em&gt; will let you do &lt;code&gt;M-x
my:gud-trap-process&lt;/code&gt; to give control to gdb. If you are running gdb
from within a shell script like I usually do provide a prefix
argument, ie. &lt;code&gt;C-u M-x my:gud-trap-process&lt;/code&gt; to handle child processes
correctly. I also have it bound to &lt;code&gt;C-x C-a t&lt;/code&gt; for brevity:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;C-x C-a t&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;gud&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;trap&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This process will not run exactly the shell command I mentioned
earlier but rather it will find the pid of gdb and send &lt;code&gt;SIGTRAP&lt;/code&gt; to it's
first child process. So if you want to automate the process in another
way here is the main idea:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;pgrep&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;P&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;xargs&lt;/span&gt; &lt;span class="n"&gt;kill&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;TRAP&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="GDB"></category><category term="C/C++"></category><category term="signals"></category></entry><entry><title>Dumping tab information with vimperator</title><link href="http://fakedrake.github.io/dumping-tab-information-with-vimperator.html" rel="alternate"></link><updated>2014-04-20T20:18:00+03:00</updated><author><name>Chris Perivolaropoulos</name></author><id>tag:fakedrake.github.io,2014-04-20:dumping-tab-information-with-vimperator.html</id><summary type="html">&lt;p&gt;To me it is quite usual that I am looking at a list of links to things
(songs, articls, books etc.) and I want to first select the ones I am
interested in and then look into them one by one. Most of the time
this does not go as smoothly as I would want it to. I wildly
underestimate the length of the list and not only do I get many many
more interesting results than I expected, but I also spend so much
time going through the entire list that I need to check them later. I
could bookmark everything and look at it later but the perfect
solution would be to dump everything in a text file and
&lt;a href="http://gist.github.com"&gt;gist&lt;/a&gt; it or then categorize it according to
artist with Python or something else equally and needlessly nerdy.&lt;/p&gt;
&lt;p&gt;So anyway, turns out firefox welcomes this kind of thing if you are a
core developer and have deep knowledge of it's inter-workings or if
you have vimperator to abstract the interface/service
inconvenience. And the matter is actually very simple.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;tabdump&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;tabs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;tabdump&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; ~~~ &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;File&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;~/Documents/tabs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tabdump&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you haven't got any better way of running more than one line of
code on firefox you can use vimperator's &lt;code&gt;:js&lt;/code&gt; which should go like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt; &lt;span class="nx"&gt;tabdump&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;tabs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;tabdump&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; ~~~ &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt; &lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;File&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;~/Documents/tabs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tabdump&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So in brief what does this code do, it uses vimperator's interface to
tabs to get a list of all tabs (basically tuples) and then you
concatenate those tuples together and dump them into a string (line
2). Then vimperator provides a simple way of file io with &lt;code&gt;io.File&lt;/code&gt; to
throw everything into a file. And there you have it&lt;/p&gt;
&lt;p&gt;If for example I were looking up bands going through a list and run
the above I would come up with something like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[...]&lt;/span&gt;

&lt;span class="na"&gt;23 ~~~ kyuss at DuckDuckGo ~~~ https://duckduckgo.com/?q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;kyuss&lt;/span&gt;
&lt;span class="na"&gt;24 ~~~ 311 at DuckDuckGo ~~~ https://duckduckgo.com/?q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;311&lt;/span&gt;
&lt;span class="na"&gt;25 ~~~ high on fire at DuckDuckGo ~~~ https://duckduckgo.com/?q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;high+on+fire&lt;/span&gt;
&lt;span class="na"&gt;26 ~~~ sleep at DuckDuckGo ~~~ https://duckduckgo.com/?q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;sleep&lt;/span&gt;
&lt;span class="na"&gt;27 ~~~ cottonmouth kings at DuckDuckGo ~~~ https://duckduckgo.com/?q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;cottonmouth+kings&lt;/span&gt;

&lt;span class="k"&gt;[...]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;EDIT&lt;/em&gt;: If you want to reopen some of those you can easily do it with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt; &lt;span class="nx"&gt;lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;File&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;~/Documents/tabs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;read&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt; &lt;span class="nx"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; ~~~ &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]}).&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;liberator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;where&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;liberator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEW_TAB&lt;/span&gt;&lt;span class="p"&gt;})})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which should open again tabs 7 to 22.&lt;/p&gt;</summary><category term="firefox"></category><category term="vimperator"></category><category term="javascript"></category><category term="tabs"></category></entry><entry><title>Dealing with enormous ramdisks and Qemu</title><link href="http://fakedrake.github.io/dealing-with-enormous-ramdisks-and-qemu.html" rel="alternate"></link><updated>2014-03-31T22:30:00+03:00</updated><author><name>Chris Perivolaropoulos</name></author><id>tag:fakedrake.github.io,2014-03-31:dealing-with-enormous-ramdisks-and-qemu.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;WARNING:&lt;/strong&gt; This is hacky and BAD. Do not use 500M ramdisks for
anything crucial. Make them small and mount the rest of the filesystem
using the rootfs related boot commands and the &lt;code&gt;-hda&lt;/code&gt; option on qemu
or use nfs or whatever.&lt;/p&gt;
&lt;p&gt;So there are times in Think-Silicon land when permanent storage
devices may not always be there for you. May that be because your
ethernet device screws up and you are relying on NFS for rootfs, or
may it be because I just want the kernel to do my bidding and load a
ramdisk that is as big as half a Gigabyte. The point is, shoving such
a big ramdisk down the kernel's throat will result in it choking into
something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="nl"&gt;RAMDISK:&lt;/span&gt; &lt;span class="n"&gt;ext2&lt;/span&gt; &lt;span class="n"&gt;filesystem&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nl"&gt;RAMDISK:&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="n"&gt;too&lt;/span&gt; &lt;span class="n"&gt;big&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500496&lt;/span&gt;&lt;span class="n"&gt;KiB&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;16384&lt;/span&gt;&lt;span class="n"&gt;KiB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;xemacps&lt;/span&gt; &lt;span class="n"&gt;e000b000&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eth&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Set&lt;/span&gt; &lt;span class="n"&gt;clk&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;124999998&lt;/span&gt; &lt;span class="n"&gt;Hz&lt;/span&gt;
&lt;span class="n"&gt;xemacps&lt;/span&gt; &lt;span class="n"&gt;e000b000&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eth&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;FULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;List&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;partitions&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="mf"&gt;1f&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;            &lt;span class="mi"&gt;1024&lt;/span&gt; &lt;span class="n"&gt;mtdblock0&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;1f&lt;/span&gt;&lt;span class="mo"&gt;01&lt;/span&gt;            &lt;span class="mi"&gt;5120&lt;/span&gt; &lt;span class="n"&gt;mtdblock1&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;1f&lt;/span&gt;&lt;span class="mo"&gt;02&lt;/span&gt;             &lt;span class="mi"&gt;128&lt;/span&gt; &lt;span class="n"&gt;mtdblock2&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;1f&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;            &lt;span class="mi"&gt;6016&lt;/span&gt; &lt;span class="n"&gt;mtdblock3&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;1f&lt;/span&gt;&lt;span class="mo"&gt;04&lt;/span&gt;            &lt;span class="mi"&gt;4096&lt;/span&gt; &lt;span class="n"&gt;mtdblock4&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;No&lt;/span&gt; &lt;span class="n"&gt;filesystem&lt;/span&gt; &lt;span class="n"&gt;could&lt;/span&gt; &lt;span class="n"&gt;mount&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tried&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;ext3&lt;/span&gt; &lt;span class="n"&gt;ext2&lt;/span&gt; &lt;span class="n"&gt;ext4&lt;/span&gt; &lt;span class="n"&gt;vfat&lt;/span&gt; &lt;span class="n"&gt;msdos&lt;/span&gt;
&lt;span class="n"&gt;Kernel&lt;/span&gt; &lt;span class="n"&gt;panic&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;syncing&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;VFS&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Unable&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;mount&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="n"&gt;fs&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;unknown&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Turns out you can do something about it, may it be hacky and
horrible. This is the tale of a glorious journey through the mysts of
the linux kernel to a busybox prompt inside of Qemu.&lt;/p&gt;
&lt;p&gt;Let's start at the beginning. When the kernel registers a block device
it then registers a number of disks, with the same major number as the
block device, that take upon them the actual work of the driver. This
paradigm is implemented in &lt;em&gt;block/genhd.c&lt;/em&gt;. This description is also
neither complete nor 100% accurate but it is good enough for now.&lt;/p&gt;
&lt;p&gt;When the kernel boots up, one of the first drivers it loads is one
called &lt;em&gt;brd&lt;/em&gt; as in &lt;em&gt;block ramdisk device&lt;/em&gt;. That driver creates a block
device interface to the main memory and lives in
&lt;em&gt;drivers/block/brd.c&lt;/em&gt;. The block device is created under the name
&lt;em&gt;ramdisk&lt;/em&gt; and major number 1 and gets disks called &lt;em&gt;ram#&lt;/em&gt; as in
&lt;em&gt;ram0&lt;/em&gt;, &lt;em&gt;ram1&lt;/em&gt;, ..., (16 by default). Those disks each represent a
space in virtual memory and have the same size, which by default is
16M. The original problem we faced above is basically the kernel
trying to fit a 500M initrd in one of those 16M disks. What we need to
do basically is resize them so that the ramdisk fits nicely.&lt;/p&gt;
&lt;p&gt;As either google or the code in &lt;em&gt;brd.c&lt;/em&gt; will kindly tell you you can
always tell the kernel in the boot commands &lt;em&gt;ramdisk_size=500000&lt;/em&gt;,
which will supposedly set things up so that we can just tell qemu
&lt;code&gt;-initrd &amp;lt;fucking-huge-ramdisk.img&amp;gt;&lt;/code&gt; and the next thing we know we are
happily writing commands on busybox. Right?&lt;/p&gt;
&lt;p&gt;&lt;img alt="WRONG" src="http://www.themistermen.co.uk/images/MrWrong.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;The kernel tries to create 16 such 500M disks. Which sucks. They are
virtual memory so it will actually boot but it is not something you
want on your virtual machine. We need to change the number of disks
the driver creates. You can do that via the &lt;code&gt;CONFIG_BLK_DEV_RAM_COUNT&lt;/code&gt;
option but I hate having to compile the entire kernel to change
something that can to some extent be changed from user space. Did I
mention you can create more such disks with &lt;code&gt;rdev -r&lt;/code&gt; from the shell?
That is because I have no idea if it is
true. &lt;em&gt;Documentation/blockdev/ramdisk.txt&lt;/em&gt; told me and it betrayed me
once by mentioning that I can &lt;code&gt;ramdisk_blocksize=N&lt;/code&gt; which if you grep
the source is hard to believe, and trust is lost easier than earned.&lt;/p&gt;
&lt;p&gt;Anyway what I ended up doing is editing &lt;code&gt;ramdisk_size()&lt;/code&gt; from this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* Legacy boot options - nonmodular */&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;__init&lt;/span&gt; &lt;span class="nf"&gt;ramdisk_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;rd_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;simple_strtol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to look more like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* Legacy boot options - nonmodular */&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;__init&lt;/span&gt; &lt;span class="nf"&gt;ramdisk_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;:
            &lt;span class="n"&gt;rd_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;:
            &lt;span class="n"&gt;rd_nr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you can pass &lt;em&gt;ramdisk_size=500000,1&lt;/em&gt; to tell the driver to make
just one 500M disk, while having &lt;em&gt;ramdisk_size=500000&lt;/em&gt; behave as
before. Noice!&lt;/p&gt;
&lt;p&gt;So now we simply run qemu&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;qemu&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="n"&gt;xilinx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;zynq&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a9&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;serial&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;serial&lt;/span&gt;
    &lt;span class="nl"&gt;mon:&lt;/span&gt;&lt;span class="n"&gt;stdio&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dtb&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;devtree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dtb&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;kernel&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zImage&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;initrd&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;enormous&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ramdisk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;nographic&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;console=ttyPS0,115200 root=/dev/ram rw ip=:::::eth0:dhcp \&lt;/span&gt;
&lt;span class="s"&gt;        loglevel=7 ramdisk_size=500496,1p&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And everything boots correctly!!&lt;/p&gt;
&lt;p&gt;I always run qemu from within a script so for completeness here is the
relevan excerpt&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;...

&lt;span class="nv"&gt;BOOTCMD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;console=ttyPS0,115200 root=/dev/ram rw ip=:::::eth0:dhcp loglevel=7 ramdisk_size=$(du --apparent-size $RAMDISK | awk &amp;#39;{print $1}&amp;#39;),1&amp;#39;&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;CMD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$QEMU -M xilinx-zynq-a9  -m 1024  -serial null -serial mon:stdio -dtb $DTB -kernel $KERNEL -initrd $RAMDISK -nographic&amp;quot;&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;Running: $CMD -append $BOOTCMD\nC-a x to kill...&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$CMD&lt;/span&gt; -append &lt;span class="s2"&gt;&amp;quot;$BOOTCMD&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As an extra benefit this will actually measure the ramdisk and make
the disk size only as big as it needs to be.&lt;/p&gt;</summary><category term="kernel"></category><category term="qemu"></category></entry><entry><title>When printks are too many</title><link href="http://fakedrake.github.io/when-printks-are-too-many.html" rel="alternate"></link><updated>2014-03-28T20:45:00+02:00</updated><author><name>Chris Perivolaropoulos</name></author><id>tag:fakedrake.github.io,2014-03-28:when-printks-are-too-many.html</id><summary type="html">&lt;p&gt;Being too lazy to use proper debugging methods as I am (although what
proper debugging methods are is sometimes
&lt;a href="http://www.linuxtoday.com/infrastructure/2000090700221OSCYKN"&gt;debateable&lt;/a&gt;),
I always (over)use printks to debug the kernel. Now the problem with
printks is that when you find your bug they are all over the kernel
code and it can be a real pain to remove them one by one.&lt;/p&gt;
&lt;p&gt;This is not a trivial problem when you spend more than a couple of
hours on a particular problem. The good news is that due to the nature
of printk-debugging you usually know which one of your nasty hacks
fixed the problem you were looking for. Thus you can &lt;code&gt;git diff&lt;/code&gt; those
to just keep the useful changes (I use emacs' ediff, meld or anything
interactive should be good enough), then you commit just those.&lt;/p&gt;
&lt;p&gt;You should learn from my mistakes and not blindly &lt;code&gt;git checkout&lt;/code&gt; at
the project root. For me there are usually some nasty device tree
changes that I make to fit Qemu and also my .config is setup for
debugging. I definitely dont want reverting any of that. Actually all
I want to revert is the .c files I threw printks in.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;sed&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;modified&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;xargs&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Works 99% of the time. To avoid the tragedy of the other 1% make sure
you take a look at &lt;code&gt;git status&lt;/code&gt; &lt;em&gt;beforehand&lt;/em&gt;.&lt;/p&gt;</summary><category term="git"></category><category term="kernel"></category><category term="debugging"></category></entry><entry><title>Hello World</title><link href="http://fakedrake.github.io/hello-world.html" rel="alternate"></link><updated>2010-10-03T10:20:00+03:00</updated><author><name>Chris Perivolaropoulos</name></author><id>tag:fakedrake.github.io,2010-10-03:hello-world.html</id><summary type="html">&lt;p&gt;This is some pyhon code&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="hello"></category><category term="world"></category></entry><entry><title>LaTeX plus Beamer</title><link href="http://fakedrake.github.io/latex-plus-beamer.html" rel="alternate"></link><updated>2010-10-03T10:20:00+03:00</updated><author><name>Chris Perivolaropoulos</name></author><id>tag:fakedrake.github.io,2010-10-03:latex-plus-beamer.html</id><summary type="html">&lt;h1&gt;Prelude&lt;/h1&gt;
&lt;p&gt;I am making a presentation about plone and I decided Impress is good
but not enough and that i should go with a non-wysiwyg solution:
LaTeX + Beamer. This is the first time I had to use Beamer with Latex
and it was quite a pleasant experience.  So before I get started with
some bumps I stumbled upon a quick recap of how to use beamer.&lt;/p&gt;
&lt;p&gt;Start the document with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;\documentclass&lt;/span&gt;&lt;span class="na"&gt;[arial, pdftex]&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;beamer&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are a couple of options available and you are welcome to look
them up(I wont go into them here) but these worked for my case(and I
believe fits most cases)&lt;/p&gt;
&lt;p&gt;Also you want to include &lt;code&gt;\usepackage{graphicx}&lt;/code&gt; if you need graphics in
your presentation(most cases).  Then add some info about the
presentation&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;\title&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;Foo Title&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\subtitle&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;Bar Subtitle&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\author&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;Chris Perivolaropoulos&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\institution&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;university of Patras&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Beamer uses this in some cases making your life easier(mostly in the title page).&lt;/p&gt;
&lt;p&gt;A quick summary of the slide definition mechanics of beamer: a slide
can be defined in two ways&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;\frame&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;Sole Contents of the slide&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;if you want something really quick (or in my case mostly for the draft version) and&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;frame&lt;span class="nb"&gt;}{&lt;/span&gt;optionally the slide title&lt;span class="nb"&gt;}&lt;/span&gt;
Contents
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;frame&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So next thing you decide when(and if) you want to show a slide with
the contents highlighted according to the context.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;\AtBeginSection&lt;/span&gt;&lt;span class="na"&gt;[]&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;frame&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="k"&gt;\frametitle&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;Table of Contents&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="k"&gt;\tableofcontents&lt;/span&gt;&lt;span class="na"&gt;[currentsection]&lt;/span&gt;&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;frame&lt;span class="nb"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This would be the case if you want a slide with a table of contents at
the beginning of each section (i would recommend heavy use of sections
and subsections, although i am too lazy to do that more than a
minimum)&lt;/p&gt;
&lt;p&gt;It is time to begin the document&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;document&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first slide is made by beamer based on the information you have
already provided.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;\frame&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\titlepage&lt;/span&gt;&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Flow control for pros&lt;/h1&gt;
&lt;p&gt;Within the slides you can use&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;\pause&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Whenever you want to stop the slide and wait for a pgdn(eg if show
items in a list one by one, put a &lt;code&gt;\pause&lt;/code&gt; after each item).&lt;/p&gt;
&lt;p&gt;Another way I found useful to control the flow is to use.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;\only&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;The only thing shown in the slide&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Each frame remains active for a number of slides (or rather is
made of a number of pdf pages if you have ever used office). The
contents of the argument of &lt;code&gt;\only&lt;/code&gt; will be shown only in the
slides/pages defined by . For example&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;frame&lt;span class="nb"&gt;}{&lt;/span&gt;In the beginning there was HTML&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;center&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\includegraphics&lt;/span&gt;&lt;span class="na"&gt;[width=0.5\textwidth]&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;html.pdf&lt;span class="nb"&gt;}&lt;/span&gt; &lt;span class="k"&gt;\\&lt;/span&gt;&lt;span class="c"&gt;% vector graphics&lt;/span&gt;
&lt;span class="k"&gt;\vspace&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;1cm&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\only&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\vspace&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;16pt&lt;span class="nb"&gt;}}&lt;/span&gt;
&lt;span class="k"&gt;\only&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;http://foo.com/about.html&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\only&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;http://foo.com/folder/item.html&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;center&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;frame&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A couple other useful things are shown here:&lt;/p&gt;
&lt;p&gt;one if you want somewhere to have an empty line and then have
something appear there &lt;code&gt;\only{\\}&lt;/code&gt; will not work. I know it would be
handy but LaTeX gets confused this way. What you do is put the size
of the fonts +2 for the space between the lines.&lt;/p&gt;
&lt;p&gt;Also it is good to use the center environment which&amp;#x2026;centers
everything in the slide. Be aware that this also means that if we
had omitted the &lt;code&gt;\only{\vspace{16pt}}&lt;/code&gt; line would screw up the
"effect" of the text appearing under the image because the size of
the content in step 2 is bigger than that of step one, so the
centering would "mess" things up. Another way to have the same
effect is to use a &lt;code&gt;\pause&lt;/code&gt; instead of &lt;code&gt;\only{\vspace{16pt}}&lt;/code&gt;. I
dont have a preference.&lt;/p&gt;
&lt;h1&gt;Vector graphics&lt;/h1&gt;
&lt;p&gt;Notice now the &lt;code&gt;\includegraphics&lt;/code&gt; line in the above exaple. I love
vector graphics and I love inkscape. Inkscape can produce pdf
files(save as-&amp;gt;*.pdf) readable by LaTeX in the way you see
above. Keep in mid though that you should convert any text in your
drawing to paths by or it will not be in the pdf(even though
inkscape's dialog claims to be able to do that for you) and also to
be careful if you are saving it as a page or as a drawing. If you
save as a page only the page is rendered when you include the file in
LaTeX, as a drawing is the way to go in most cases.&lt;/p&gt;
&lt;h1&gt;For the boring (or how to show statistics properly)&lt;/h1&gt;
&lt;p&gt;In my talk i also have some bar charts. What most documentation and
forums suggested for that was a package called pgfplots. DONT USE
THAT. It stole more than 4 hours of my life to produce a mediocre
result. Use R instead. In case you are not familiar with it R is a
language focused on dealing with statistics (package is &lt;code&gt;r-base&lt;/code&gt; for
ubuntu and &lt;code&gt;r&lt;/code&gt; for arch).&lt;/p&gt;
&lt;p&gt;It can produce REALLY easily bar charts that look the way you expect
them to IF you &lt;strong&gt;don't&lt;/strong&gt; use sweave. Sweave is a tool that is supposed
to provide a friendly bridge between R and LaTeX. It works the way
you expect it to but (as many latex modules) is poorly documented
and most importantly the workflow of working with it is very
inefficient. (Note that it has the advantage that it can be
automated meaning that if you plan to frequently work with plots and
graphs in LaTeX you should definitely look into it, if not stay away
as I would rather have done from the getgo).&lt;/p&gt;
&lt;p&gt;Instead i ended up being very happy and productive using the R shell
and making it export what I wanted in .pdf graphics files. I will not
go into detail of how to use R. It is really well documented and I am
not by far qualified to say anything about R except that it saved me
loads of time.&lt;/p&gt;
&lt;h1&gt;You're good to go&lt;/h1&gt;
&lt;p&gt;This is the wisdom I have acquired so far from writing my
presentation. I hope this saves people some time and energy.&lt;/p&gt;</summary><category term="latex"></category><category term="beamer"></category></entry></feed>