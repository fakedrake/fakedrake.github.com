<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Î»</title><link href="https://fakedrake.github.io/" rel="alternate"></link><link href="https://fakedrake.github.io/feeds/gdb.atom.xml" rel="self"></link><id>https://fakedrake.github.io/</id><updated>2014-05-06T16:36:00+03:00</updated><entry><title>Gdb signals</title><link href="https://fakedrake.github.io/gdb-signals.html" rel="alternate"></link><updated>2014-05-06T16:36:00+03:00</updated><author><name>Chris Perivolaropoulos</name></author><id>tag:fakedrake.github.io,2014-05-06:gdb-signals.html</id><summary type="html">&lt;p&gt;So unless you are debugging your own program and you know what you are
doing this is probably not what you expect to happen while a program
runs under GDB.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Program received signal SIGUSR1, User defined signal 1.
[Switching to Thread 0x7fffcff2c700 (LWP 3296)]
...
(gdb)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You may hit &lt;code&gt;c&lt;/code&gt; to continue but this will come up again sooner or
later and I like my breakpoints to be tidy.&lt;/p&gt;
&lt;p&gt;First take a look at how gdb handles each signal.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;
(gdb) info signals
Signal        Stop  Print   Pass to program Description

SIGHUP        Yes   Yes     Yes     Hangup
SIGINT        Yes   Yes     No      Interrupt
SIGQUIT       Yes   Yes     Yes     Quit
SIGILL        Yes   Yes     Yes     Illegal instruction
SIGTRAP       Yes   Yes     No      Trace/breakpoint trap
SIGABRT       Yes   Yes     Yes     Aborted
SIGEMT        Yes   Yes     Yes     Emulation trap

[...]

SIGWINCH      No    No      Yes     Window size changed
SIGLOST       Yes   Yes     Yes     Resource lost
&lt;b&gt;SIGUSR1      Yes Yes     Yes     User defined signal 1&lt;/b&gt;
SIGUSR2       Yes   Yes     Yes     User defined signal 2
SIGPWR        Yes   Yes     Yes     Power fail/restart

[...]

EXC_EMULATION Yes   Yes     Yes     Emulation instruction
EXC_SOFTWARE  Yes   Yes     Yes     Software generated exception
EXC_BREAKPOINT Yes  Yes     Yes     Breakpoint

Use the "handle" command to change these tables.
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As the command says you want &lt;code&gt;SIGUSR1&lt;/code&gt; to not stop and also for it to
be passed to the program. The other thing we notice here is that
&lt;code&gt;SIGTRAP&lt;/code&gt; is not passed to the program.&lt;/p&gt;
&lt;p&gt;To have &lt;code&gt;SIGUSR1&lt;/code&gt; be ignored by GDB&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(gdb) handle SIGUSR1 nostop noprint
Signal        Stop  Print   Pass to program Description
SIGUSR1       No    No  Yes     User defined signal 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now here is another recurring interrupt related issue: Sometimes you
need to to pass control to gdb while the program is running. The
default way would be to hit &lt;code&gt;C-c&lt;/code&gt;. In a very rare occasion (ie. qemu)
the process will catch the key and will not stop. Instead of
despairing you can try sending it a &lt;code&gt;SIGTRAP&lt;/code&gt;. That will stop the
program as if gdb had encountered a breakpoint. From another terminal
run.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pkill -TRAP &amp;lt;process-name&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you are using &lt;em&gt;emacs&lt;/em&gt; and &lt;em&gt;gud&lt;/em&gt; like me you can automate this with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;my:gud-trap-process&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&amp;amp;optional&lt;/span&gt; &lt;span class="nv"&gt;wrapping-script&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;interactive&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;*P&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;child-pid&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;xargs pgrep -P | head -1 |&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;async-shell-command&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;echo %d | %s %s xargs echo kill -TRAP&amp;quot;&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;process-id&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;get-buffer-process&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;*gud*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
         &lt;span class="nv"&gt;child-pid&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;wrapping-script&lt;/span&gt; &lt;span class="nv"&gt;child-pid&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Putting this in your &lt;em&gt;.emacs&lt;/em&gt; will let you do &lt;code&gt;M-x
my:gud-trap-process&lt;/code&gt; to give control to gdb. If you are running gdb
from within a shell script like I usually do provide a prefix
argument, ie. &lt;code&gt;C-u M-x my:gud-trap-process&lt;/code&gt; to handle child processes
correctly. I also have it bound to &lt;code&gt;C-x C-a t&lt;/code&gt; for brevity:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(global-set-key (kbd &amp;quot;C-x C-a t&amp;quot;) `my:gud-trap-process)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This process will not run exactly the shell command I mentioned
earlier but rather it will find the pid of gdb and send &lt;code&gt;SIGTRAP&lt;/code&gt; to it's
first child process. So if you want to automate the process in another
way here is the main idea:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pgrep -P &amp;lt;gdb pid&amp;gt; &lt;span class="p"&gt;|&lt;/span&gt; head -1 &lt;span class="p"&gt;|&lt;/span&gt; xargs &lt;span class="nb"&gt;kill&lt;/span&gt; -TRAP
&lt;/pre&gt;&lt;/div&gt;</summary><category term="GDB"></category><category term="C/C++"></category><category term="signals"></category></entry></feed>