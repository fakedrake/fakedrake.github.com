<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Batman Ph.D</title><link href="https://fakedrake.github.io/" rel="alternate"></link><link href="https://fakedrake.github.io/feeds/kernel.atom.xml" rel="self"></link><id>https://fakedrake.github.io/</id><updated>2014-07-16T18:25:00+03:00</updated><entry><title>Ethernet deadlocks and forking the kernel</title><link href="https://fakedrake.github.io/ethernet-deadlocks-and-forking-the-kernel.html" rel="alternate"></link><updated>2014-07-16T18:25:00+03:00</updated><author><name>Chris Perivolaropoulos</name></author><id>tag:fakedrake.github.io,2014-07-16:ethernet-deadlocks-and-forking-the-kernel.html</id><summary type="html">&lt;p&gt;This is a bit specific but it is something I encountered more than
once and spent a couple of hours trying to fix. So here is the
problem. I have a xilinx zynq zc702 board and I load a slightly
customized 3.8 linux kernel on it. I boot it and it freezes at&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="n"&gt;loaded&lt;/span&gt;
&lt;span class="n"&gt;xqspips&lt;/span&gt; &lt;span class="n"&gt;e000d000&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;spi&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;unqueued&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;deprecated&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now now you probably want to know what boot arguments I was using and
what kind of modifications I have made to the kernel and the exact
release but it doesn't really matter. The problem was the xqspips
driver and not the fact that something is deprecated -who knows what
this message means exactly-.&lt;/p&gt;
&lt;p&gt;Let me walk you through around the problem what happens in
&lt;a href="https://github.com/fakedrake/linux-thinksilicon/blob/qemu/drivers/spi/spi-xilinx-qps.c"&gt;drivers/spi/spi-xilinx-qps.c&lt;/a&gt;
when a spi transfer commences.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xqspips_start_transfer&lt;/code&gt; runs&lt;/li&gt;
&lt;li&gt;At some poiunt it writes to &lt;code&gt;XQSPIPS_IEN_OFFSET&lt;/code&gt; register to raise
  an interrupt that will call asynchronously &lt;code&gt;xqspips_irq&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xqspips_start_transfer&lt;/code&gt; inits some other stuff and then waits for
  &lt;code&gt;xqspips_irq&lt;/code&gt; to set a completion structure.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now &lt;code&gt;xqspips_irq&lt;/code&gt; is passed a &lt;code&gt;xqspips&lt;/code&gt; structure that contains
information about how much data we want to transmit and how much data
we expect to receive.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First it checks with the status register to see if there is some
  space in the transfer buffer or that there is something useful in
  the receive buffer.&lt;/li&gt;
&lt;li&gt;While the receive buffer is not empty try to read data from it
  decrementing &lt;code&gt;struct xqspips-&amp;gt;bytes_to_receive&lt;/code&gt; correctly.&lt;/li&gt;
&lt;li&gt;If there is stuff to transfer, transfer it&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;struct xqspips-&amp;gt;bytes_to_receive&lt;/code&gt; is not yet zero reissue an
  interrupt in a slightly different way than before and finalize.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;struct xqspips-&amp;gt;bytes_to_receive&lt;/code&gt; is zero complete the
  completion struct that &lt;code&gt;xqspips_start_transfer&lt;/code&gt; is waiting for and
  finalize.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The above is a rough descriuption of the situation. Now I don't know
if it is a hardware problem or a driver bug but there are two problems
here. One is that &lt;code&gt;xqspi-&amp;gt;bytes_to_receive&lt;/code&gt; is 1 while the status
register claims there is no data in the buffer. And also setting the
&lt;code&gt;IEN&lt;/code&gt; register doesn't raise an interrupt. Thus irq callback fails to
read the data isntructed by &lt;code&gt;xqspi-&amp;gt;bytes_to_receive&lt;/code&gt; and proceeds
finish confident that an interrupt was raised to take care of the
situation.&lt;/p&gt;
&lt;p&gt;The hard part of this was finding all the above out. Then it was
trivial to just tell &lt;code&gt;xqspips_irq&lt;/code&gt; to not only check the status
register to decide whether it should read or not, but also check with
the xqspi struct. Essentially changing&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* Read out the data from the RX FIFO */&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xqspips_read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xqspi&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;regs&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;XQSPIPS_STATUS_OFFSET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;
    &lt;span class="n"&gt;XQSPIPS_IXR_RXNEMTY_MASK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;into&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* Read out the data from the RX FIFO */&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;xqspips_read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xqspi&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;regs&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;XQSPIPS_STATUS_OFFSET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;
    &lt;span class="n"&gt;XQSPIPS_IXR_RXNEMTY_MASK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
    &lt;span class="n"&gt;xqspi&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;bytes_to_receive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;did the trick.&lt;/p&gt;</summary><category term="drivers"></category><category term="irq"></category><category term="linux"></category><category term="kernel"></category></entry><entry><title>Dealing with enormous ramdisks and Qemu</title><link href="https://fakedrake.github.io/dealing-with-enormous-ramdisks-and-qemu.html" rel="alternate"></link><updated>2014-03-31T22:30:00+03:00</updated><author><name>Chris Perivolaropoulos</name></author><id>tag:fakedrake.github.io,2014-03-31:dealing-with-enormous-ramdisks-and-qemu.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;WARNING:&lt;/strong&gt; This is hacky and BAD. Do not use 500M ramdisks for
anything crucial. Make them small and mount the rest of the filesystem
using the rootfs related boot commands and the &lt;code&gt;-hda&lt;/code&gt; option on qemu
or use nfs or whatever.&lt;/p&gt;
&lt;p&gt;So there are times in Think-Silicon land when permanent storage
devices may not always be there for you. May that be because your
ethernet device screws up and you are relying on NFS for rootfs, or
may it be because I just want the kernel to do my bidding and load a
ramdisk that is as big as half a Gigabyte. The point is, shoving such
a big ramdisk down the kernel's throat will result in it choking into
something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;...

RAMDISK: ext2 filesystem found at block 0
RAMDISK: image too big! (500496KiB/16384KiB)
xemacps e000b000.eth: Set clk to 124999998 Hz
xemacps e000b000.eth: link up (1000/FULL)
List of all partitions:
1f00            1024 mtdblock0  (driver?)
1f01            5120 mtdblock1  (driver?)
1f02             128 mtdblock2  (driver?)
1f03            6016 mtdblock3  (driver?)
1f04            4096 mtdblock4  (driver?)
No filesystem could mount root, tried:  ext3 ext2 ext4 vfat msdos
Kernel panic - not syncing: VFS: Unable to mount root fs on unknown-block(1,0)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Turns out you can do something about it, may it be hacky and
horrible. This is the tale of a glorious journey through the mysts of
the linux kernel to a busybox prompt inside of Qemu.&lt;/p&gt;
&lt;p&gt;Let's start at the beginning. When the kernel registers a block device
it then registers a number of disks, with the same major number as the
block device, that take upon them the actual work of the driver. This
paradigm is implemented in &lt;em&gt;block/genhd.c&lt;/em&gt;. This description is also
neither complete nor 100% accurate but it is good enough for now.&lt;/p&gt;
&lt;p&gt;When the kernel boots up, one of the first drivers it loads is one
called &lt;em&gt;brd&lt;/em&gt; as in &lt;em&gt;block ramdisk device&lt;/em&gt;. That driver creates a block
device interface to the main memory and lives in
&lt;em&gt;drivers/block/brd.c&lt;/em&gt;. The block device is created under the name
&lt;em&gt;ramdisk&lt;/em&gt; and major number 1 and gets disks called &lt;em&gt;ram#&lt;/em&gt; as in
&lt;em&gt;ram0&lt;/em&gt;, &lt;em&gt;ram1&lt;/em&gt;, ..., (16 by default). Those disks each represent a
space in virtual memory and have the same size, which by default is
16M. The original problem we faced above is basically the kernel
trying to fit a 500M initrd in one of those 16M disks. What we need to
do basically is resize them so that the ramdisk fits nicely.&lt;/p&gt;
&lt;p&gt;As either google or the code in &lt;em&gt;brd.c&lt;/em&gt; will kindly tell you you can
always tell the kernel in the boot commands &lt;em&gt;ramdisk_size=500000&lt;/em&gt;,
which will supposedly set things up so that we can just tell qemu
&lt;code&gt;-initrd &amp;lt;fucking-huge-ramdisk.img&amp;gt;&lt;/code&gt; and the next thing we know we are
happily writing commands on busybox. Right?&lt;/p&gt;
&lt;p&gt;&lt;img alt="WRONG" src="http://www.themistermen.co.uk/images/MrWrong.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;The kernel tries to create 16 such 500M disks. Which sucks. They are
virtual memory so it will actually boot but it is not something you
want on your virtual machine. We need to change the number of disks
the driver creates. You can do that via the &lt;code&gt;CONFIG_BLK_DEV_RAM_COUNT&lt;/code&gt;
option but I hate having to compile the entire kernel to change
something that can to some extent be changed from user space. Did I
mention you can create more such disks with &lt;code&gt;rdev -r&lt;/code&gt; from the shell?
That is because I have no idea if it is
true. &lt;em&gt;Documentation/blockdev/ramdisk.txt&lt;/em&gt; told me and it betrayed me
once by mentioning that I can &lt;code&gt;ramdisk_blocksize=N&lt;/code&gt; which if you grep
the source is hard to believe, and trust is lost easier than earned.&lt;/p&gt;
&lt;p&gt;Anyway what I ended up doing is editing &lt;code&gt;ramdisk_size()&lt;/code&gt; from this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* Legacy boot options - nonmodular */&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;__init&lt;/span&gt; &lt;span class="nf"&gt;ramdisk_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;rd_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;simple_strtol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to look more like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* Legacy boot options - nonmodular */&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;__init&lt;/span&gt; &lt;span class="nf"&gt;ramdisk_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;rd_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;rd_nr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you can pass &lt;em&gt;ramdisk_size=500000,1&lt;/em&gt; to tell the driver to make
just one 500M disk, while having &lt;em&gt;ramdisk_size=500000&lt;/em&gt; behave as
before. Noice!&lt;/p&gt;
&lt;p&gt;So now we simply run qemu&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;qemu-system-arm -M xilinx-zynq-a9 -m 1024 -serial null -serial
    mon:stdio -dtb ./devtree.dtb -kernel path/to/zImage
    -initrd path/to/enormous-ramdisk.img -nographic
    -append &amp;quot;console=ttyPS0,115200 root=/dev/ram rw ip=:::::eth0:dhcp \
        loglevel=7 ramdisk_size=500496,1p&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And everything boots correctly!!&lt;/p&gt;
&lt;p&gt;I always run qemu from within a script so for completeness here is the
relevan excerpt&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;...

&lt;span class="nv"&gt;BOOTCMD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;console=ttyPS0,115200 root=/dev/ram rw ip=:::::eth0:dhcp loglevel=7 ramdisk_size=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;du --apparent-size &lt;span class="nv"&gt;$RAMDISK&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{print $1}&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;,1&amp;#39;&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;CMD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$QEMU&lt;/span&gt;&lt;span class="s2"&gt; -M xilinx-zynq-a9  -m 1024  -serial null -serial mon:stdio -dtb &lt;/span&gt;&lt;span class="nv"&gt;$DTB&lt;/span&gt;&lt;span class="s2"&gt; -kernel &lt;/span&gt;&lt;span class="nv"&gt;$KERNEL&lt;/span&gt;&lt;span class="s2"&gt; -initrd &lt;/span&gt;&lt;span class="nv"&gt;$RAMDISK&lt;/span&gt;&lt;span class="s2"&gt; -nographic&amp;quot;&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;Running: &lt;/span&gt;&lt;span class="nv"&gt;$CMD&lt;/span&gt;&lt;span class="s2"&gt; -append &lt;/span&gt;&lt;span class="nv"&gt;$BOOTCMD&lt;/span&gt;&lt;span class="s2"&gt;\nC-a x to kill...&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$CMD&lt;/span&gt; -append &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$BOOTCMD&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As an extra benefit this will actually measure the ramdisk and make
the disk size only as big as it needs to be.&lt;/p&gt;</summary><category term="kernel"></category><category term="qemu"></category></entry><entry><title>When printks are too many</title><link href="https://fakedrake.github.io/when-printks-are-too-many.html" rel="alternate"></link><updated>2014-03-28T20:45:00+02:00</updated><author><name>Chris Perivolaropoulos</name></author><id>tag:fakedrake.github.io,2014-03-28:when-printks-are-too-many.html</id><summary type="html">&lt;p&gt;Being too lazy to use proper debugging methods as I am (although what
proper debugging methods are is sometimes
&lt;a href="http://www.linuxtoday.com/infrastructure/2000090700221OSCYKN"&gt;debateable&lt;/a&gt;),
I always (over)use printks to debug the kernel. Now the problem with
printks is that when you find your bug they are all over the kernel
code and it can be a real pain to remove them one by one.&lt;/p&gt;
&lt;p&gt;This is not a trivial problem when you spend more than a couple of
hours on a particular problem. The good news is that due to the nature
of printk-debugging you usually know which one of your nasty hacks
fixed the problem you were looking for. Thus you can &lt;code&gt;git diff&lt;/code&gt; those
to just keep the useful changes (I use emacs' ediff, meld or anything
interactive should be good enough), then you commit just those.&lt;/p&gt;
&lt;p&gt;You should learn from my mistakes and not blindly &lt;code&gt;git checkout&lt;/code&gt; at
the project root. For me there are usually some nasty device tree
changes that I make to fit Qemu and also my .config is setup for
debugging. I definitely dont want reverting any of that. Actually all
I want to revert is the .c files I threw printks in.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git status | sed -n &amp;#39;s/.*modified: *\(.*\.c\)/\1/p&amp;#39; | xargs git checkout
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Works 99% of the time. To avoid the tragedy of the other 1% make sure
you take a look at &lt;code&gt;git status&lt;/code&gt; &lt;em&gt;beforehand&lt;/em&gt;.&lt;/p&gt;</summary><category term="git"></category><category term="kernel"></category><category term="debugging"></category></entry></feed>