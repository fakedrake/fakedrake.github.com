<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>λα.mbdα</title><link href="https://fakedrake.github.io/" rel="alternate"></link><link href="https://fakedrake.github.io/feeds/misc.atom.xml" rel="self"></link><id>https://fakedrake.github.io/</id><updated>2016-04-30T03:33:00+03:00</updated><entry><title>Streaming Data through HTTP with Haskell</title><link href="https://fakedrake.github.io/streaming-data-through-http-with-haskell.html" rel="alternate"></link><updated>2016-04-30T03:33:00+03:00</updated><author><name>Chris Perivolaropoulos</name></author><id>tag:fakedrake.github.io,2016-04-30:streaming-data-through-http-with-haskell.html</id><summary type="html">&lt;p&gt;So I wanted to do some processing on wikipedia articles but I don't
have enough disk space to download them first and process them later,
it needs to be on-the-fly. Fortunately they are stored bziped which
means they are compressed at the block level and I don't need the last
byte to know what the first one means. So I begun by finding a way to
stream data. I struggled with Conduit a bit but then I stumbled upon a
much simpler solution:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Network.HTTP.Client&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Network.HTTP.Client.TLS&lt;/span&gt;   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tlsManagerSettings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Control.Monad.Fix&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Data.Conduit&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="k"&gt;qualified&lt;/span&gt; &lt;span class="nn"&gt;Data.ByteString&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;BS&lt;/span&gt;

&lt;span class="nf"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://dumps.wikimedia.org/enwiki/latest/enwiki-latest-pages-articles.xml.bz2&amp;quot;&lt;/span&gt;

&lt;span class="nf"&gt;printLen&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Got bytes: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;BS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;getResp&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;getResp&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;man&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;newManager&lt;/span&gt; &lt;span class="n"&gt;tlsManagerSettings&lt;/span&gt;
  &lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;parseUrl&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;
  &lt;span class="n"&gt;withResponse&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="n"&gt;man&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Got a response, now streaming...&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;fix&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;bytes&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;brRead&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;responseBody&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;
      &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="kt"&gt;BS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Done!&amp;quot;&lt;/span&gt; &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Got &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;BS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; but will ignore&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;loop&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;getResp&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This just downloads the data, I haven't yet looked into actually
decompressing. My plan is to convert this fixpoint call into a conduit
and pipe the data trhough uncompression -- the conduit xml parser that
is quite neat -- whatever processing I want. Fingers crossed.&lt;/p&gt;</summary></entry><entry><title>Limiting simultaneous threads in Haskell</title><link href="https://fakedrake.github.io/limiting-parallel-thread-in-haskell.html" rel="alternate"></link><updated>2016-04-29T02:23:00+03:00</updated><author><name>Chris Perivolaropoulos</name></author><id>tag:fakedrake.github.io,2016-04-29:limiting-parallel-thread-in-haskell.html</id><summary type="html">&lt;p&gt;Iwas making a mini crawler to download all mp3s from a website in
Haskell and was confronted with the following problem: it is easy to
download stuff serially or to download them all in parallel. What is
slightly harder is to download just a couple in parallel.&lt;/p&gt;
&lt;p&gt;I will start with an introduction it &lt;code&gt;MVar&lt;/code&gt;. Let's say we want a
safer &lt;code&gt;putStrLn&lt;/code&gt; that does not interleave it's output with other
&lt;code&gt;putStrLn&lt;/code&gt;s but rather waits for it's turn:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Control.Concurrent.MVar&lt;/span&gt;

&lt;span class="nf"&gt;putStrLn&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;putMVar&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
  &lt;span class="n"&gt;takeMVar&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we call it like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;main &lt;span class="o"&gt;=&lt;/span&gt; do
  ioLock &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; newEmptyMVar
  &lt;span class="kc"&gt;...&lt;/span&gt;
  putStrLn&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="err"&gt; ioLock $ &amp;quot;Found talks: &amp;quot; ++ (show $ length urls)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now that was fairly easy. What about the case where we want a few
simultaneous threads and the rest should wait for any of them to
finish.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;-- | There is no 0 state for MVar. 0 means taken. So check if it is&lt;/span&gt;
&lt;span class="c1"&gt;-- taken and if so treat it as 0 by putting 1, otherwise take,&lt;/span&gt;
&lt;span class="c1"&gt;-- increment, put&lt;/span&gt;
&lt;span class="nf"&gt;increment&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MVar&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
&lt;span class="nf"&gt;increment&lt;/span&gt; &lt;span class="n"&gt;procs&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;taken&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;isEmptyMVar&lt;/span&gt; &lt;span class="n"&gt;procs&lt;/span&gt;
  &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;taken&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="n"&gt;putMVar&lt;/span&gt; &lt;span class="n"&gt;procs&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;takeMVar&lt;/span&gt; &lt;span class="n"&gt;procs&lt;/span&gt;
    &lt;span class="n"&gt;putMVar&lt;/span&gt; &lt;span class="n"&gt;procs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;-- | If we are going for 0 don&amp;#39;t put back. 0 is special in that it&lt;/span&gt;
&lt;span class="c1"&gt;-- blocks everyone trying to decrement.&lt;/span&gt;
&lt;span class="nf"&gt;decrement&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MVar&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
&lt;span class="nf"&gt;decrement&lt;/span&gt; &lt;span class="n"&gt;procsLock&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;takeMVar&lt;/span&gt; &lt;span class="n"&gt;procsLock&lt;/span&gt;
  &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="n"&gt;putMVar&lt;/span&gt; &lt;span class="n"&gt;procsLock&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="c1"&gt;-- | Decrement until we are done then increment&lt;/span&gt;
&lt;span class="nf"&gt;guarded&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MVar&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;MVar&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="nf"&gt;guarded&lt;/span&gt; &lt;span class="n"&gt;ioLock&lt;/span&gt; &lt;span class="n"&gt;procsLock&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;slotsLeft&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;decrement&lt;/span&gt; &lt;span class="n"&gt;procsLock&lt;/span&gt;
  &lt;span class="n"&gt;putStrLn&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;ioLock&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Slots left: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="n"&gt;slotsLeft&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;
  &lt;span class="n"&gt;increment&lt;/span&gt; &lt;span class="n"&gt;procsLock&lt;/span&gt;
  &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can call it like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Control.Monad.Parallel&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;procs&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;newMVar&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="n"&gt;data_&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;mapM_&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;guarded&lt;/span&gt; &lt;span class="n"&gt;ioLock&lt;/span&gt; &lt;span class="n"&gt;procs&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;getUrl&lt;/span&gt; &lt;span class="n"&gt;ioLock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;urls&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And &lt;code&gt;getUrl&lt;/code&gt; will run at most 5 times simultaneously.&lt;/p&gt;</summary></entry><entry><title>Automated insights with org mode</title><link href="https://fakedrake.github.io/automated-insights-with-org-mode.html" rel="alternate"></link><updated>2016-01-29T15:22:00+02:00</updated><author><name>Chris Perivolaropoulos</name></author><id>tag:fakedrake.github.io,2016-01-29:automated-insights-with-org-mode.html</id><summary type="html">&lt;p&gt;title:
date: 2016-01-29 15:22
tags: org-mode,emacs
category:
slug: automated-insights-with-org-mode
author: Chris PerivolaropoulosYY&lt;/p&gt;
&lt;p&gt;title: Automated insights with org mode
date: 2016-05-12 16:10
title: Automated insights with org mode
date: 2016-01-29 15:22
tags: org-mode,emacs
category:
slug: automated-insights-with-org-mode
author: Chris Perivolaropoulos&lt;/p&gt;
&lt;p&gt;The other day I trying to evaluate various roadmaps that a projact
could continue into and try to compare the cost and the duration of
each solution. I started off writing a an org mode document describing
each scenario separately and putting each task in it's separate
heading. Soon I made the following observation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Some tasks had unknown duration&lt;/li&gt;
&lt;li&gt;Many tasks were common for more than one solution&lt;/li&gt;
&lt;/ul&gt;</summary><category term="org-mode"></category><category term="emacs"></category></entry><entry><title>Killing mysql queries</title><link href="https://fakedrake.github.io/killing-mysql-queries.html" rel="alternate"></link><updated>2016-01-20T13:07:00+02:00</updated><author><name>Chris Perivolaropoulos</name></author><id>tag:fakedrake.github.io,2016-01-20:killing-mysql-queries.html</id><summary type="html">&lt;p&gt;MySQL queries are many times painfully slow. So slow that it is not
worth waiting. Here is how to kill a running query.&lt;/p&gt;
&lt;p&gt;First of all you need to know what is running to choose what to kill.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt; show processlist
|       Id | User | Host | db      | Command | Time | State        | Info                      |
|----------+------+------+---------+---------+------+--------------+---------------------------|
| 35162105 | me   | host | db_name | Query   |  183 | Sending data | SELECT * FROM `HugeTable` |
| 35162616 | me   | host | db_name | Query   |    0 | NULL         | show processlist          |
| 35162617 | me   | host | db_name | Sleep   |    0 |              | NULL                      |
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The last process we don't care about and the one before that is the
one we just ran to get the process list itself. The first one is the
one to kill. So now that we have the id, we can kill it by running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt; kill 35162105
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And we freed up the server!&lt;/p&gt;</summary></entry></feed>